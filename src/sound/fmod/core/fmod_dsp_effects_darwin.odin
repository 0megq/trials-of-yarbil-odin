package fmod_core

/* ============================================================================================================= */
/* FMOD Core API - Built-in effects header file.                                                                 */
/* Copyright (c), Firelight Technologies Pty, Ltd. 2004-2023.                                                    */
/*                                                                                                               */
/* In this header you can find parameter structures for FMOD system registered DSP effects                       */
/* and generators.                                                                                               */
/*                                                                                                               */
/* For more detail visit:                                                                                        */
/* https://fmod.com/docs/2.02/api/core-api-common-dsp-effects.html#fmod_dsp_type                                 */
/* ============================================================================================================= */

DSP_TYPE :: enum i32 {
    DSP_TYPE_UNKNOWN,
    DSP_TYPE_MIXER,
    DSP_TYPE_OSCILLATOR,
    DSP_TYPE_LOWPASS,
    DSP_TYPE_ITLOWPASS,
    DSP_TYPE_HIGHPASS,
    DSP_TYPE_ECHO,
    DSP_TYPE_FADER,
    DSP_TYPE_FLANGE,
    DSP_TYPE_DISTORTION,
    DSP_TYPE_NORMALIZE,
    DSP_TYPE_LIMITER,
    DSP_TYPE_PARAMEQ,
    DSP_TYPE_PITCHSHIFT,
    DSP_TYPE_CHORUS,
    DSP_TYPE_VSTPLUGIN,
    DSP_TYPE_WINAMPPLUGIN,
    DSP_TYPE_ITECHO,
    DSP_TYPE_COMPRESSOR,
    DSP_TYPE_SFXREVERB,
    DSP_TYPE_LOWPASS_SIMPLE,
    DSP_TYPE_DELAY,
    DSP_TYPE_TREMOLO,
    DSP_TYPE_LADSPAPLUGIN,
    DSP_TYPE_SEND,
    DSP_TYPE_RETURN,
    DSP_TYPE_HIGHPASS_SIMPLE,
    DSP_TYPE_PAN,
    DSP_TYPE_THREE_EQ,
    DSP_TYPE_FFT,
    DSP_TYPE_LOUDNESS_METER,
    DSP_TYPE_ENVELOPEFOLLOWER,
    DSP_TYPE_CONVOLUTIONREVERB,
    DSP_TYPE_CHANNELMIX,
    DSP_TYPE_TRANSCEIVER,
    DSP_TYPE_OBJECTPAN,
    DSP_TYPE_MULTIBAND_EQ,

    DSP_TYPE_MAX,
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// FMOD built in effect parameters.  
// 
// Use DSP::setParameter with these enums for the 'index' parameter.
//

DSP_OSCILLATOR :: enum i32 {
    DSP_OSCILLATOR_TYPE,
    DSP_OSCILLATOR_RATE,
}


DSP_LOWPASS :: enum i32 {
    DSP_LOWPASS_CUTOFF,
    DSP_LOWPASS_RESONANCE,
}


DSP_ITLOWPASS :: enum i32 {
    DSP_ITLOWPASS_CUTOFF,
    DSP_ITLOWPASS_RESONANCE,
}


DSP_HIGHPASS :: enum i32 {
    DSP_HIGHPASS_CUTOFF,
    DSP_HIGHPASS_RESONANCE,
}


DSP_ECHO :: enum i32 {
    DSP_ECHO_DELAY,
    DSP_ECHO_FEEDBACK,
    DSP_ECHO_DRYLEVEL,
    DSP_ECHO_WETLEVEL,
}


DSP_FADER :: enum i32 {
    DSP_FADER_GAIN,
    DSP_FADER_OVERALL_GAIN,
}


DSP_FLANGE :: enum i32 {
    DSP_FLANGE_MIX,
    DSP_FLANGE_DEPTH,
    DSP_FLANGE_RATE,
}


DSP_DISTORTION :: enum i32 {
    DSP_DISTORTION_LEVEL,
}


DSP_NORMALIZE :: enum i32 {
    DSP_NORMALIZE_FADETIME,
    DSP_NORMALIZE_THRESHOLD,
    DSP_NORMALIZE_MAXAMP,
}


DSP_LIMITER :: enum i32 {
    DSP_LIMITER_RELEASETIME,
    DSP_LIMITER_CEILING,
    DSP_LIMITER_MAXIMIZERGAIN,
    DSP_LIMITER_MODE,
}


DSP_PARAMEQ :: enum i32 {
    DSP_PARAMEQ_CENTER,
    DSP_PARAMEQ_BANDWIDTH,
    DSP_PARAMEQ_GAIN,
}


DSP_MULTIBAND_EQ :: enum i32 {
    DSP_MULTIBAND_EQ_A_FILTER,
    DSP_MULTIBAND_EQ_A_FREQUENCY,
    DSP_MULTIBAND_EQ_A_Q,
    DSP_MULTIBAND_EQ_A_GAIN,
    DSP_MULTIBAND_EQ_B_FILTER,
    DSP_MULTIBAND_EQ_B_FREQUENCY,
    DSP_MULTIBAND_EQ_B_Q,
    DSP_MULTIBAND_EQ_B_GAIN,
    DSP_MULTIBAND_EQ_C_FILTER,
    DSP_MULTIBAND_EQ_C_FREQUENCY,
    DSP_MULTIBAND_EQ_C_Q,
    DSP_MULTIBAND_EQ_C_GAIN,
    DSP_MULTIBAND_EQ_D_FILTER,
    DSP_MULTIBAND_EQ_D_FREQUENCY,
    DSP_MULTIBAND_EQ_D_Q,
    DSP_MULTIBAND_EQ_D_GAIN,
    DSP_MULTIBAND_EQ_E_FILTER,
    DSP_MULTIBAND_EQ_E_FREQUENCY,
    DSP_MULTIBAND_EQ_E_Q,
    DSP_MULTIBAND_EQ_E_GAIN,
}


DSP_MULTIBAND_EQ_FILTER_TYPE :: enum i32 {
    DSP_MULTIBAND_EQ_FILTER_DISABLED,
    DSP_MULTIBAND_EQ_FILTER_LOWPASS_12DB,
    DSP_MULTIBAND_EQ_FILTER_LOWPASS_24DB,
    DSP_MULTIBAND_EQ_FILTER_LOWPASS_48DB,
    DSP_MULTIBAND_EQ_FILTER_HIGHPASS_12DB,
    DSP_MULTIBAND_EQ_FILTER_HIGHPASS_24DB,
    DSP_MULTIBAND_EQ_FILTER_HIGHPASS_48DB,
    DSP_MULTIBAND_EQ_FILTER_LOWSHELF,
    DSP_MULTIBAND_EQ_FILTER_HIGHSHELF,
    DSP_MULTIBAND_EQ_FILTER_PEAKING,
    DSP_MULTIBAND_EQ_FILTER_BANDPASS,
    DSP_MULTIBAND_EQ_FILTER_NOTCH,
    DSP_MULTIBAND_EQ_FILTER_ALLPASS,
}


DSP_PITCHSHIFT :: enum i32 {
    DSP_PITCHSHIFT_PITCH,
    DSP_PITCHSHIFT_FFTSIZE,
    DSP_PITCHSHIFT_OVERLAP,
    DSP_PITCHSHIFT_MAXCHANNELS,
}


DSP_CHORUS :: enum i32 {
    DSP_CHORUS_MIX,
    DSP_CHORUS_RATE,
    DSP_CHORUS_DEPTH,
}


DSP_ITECHO :: enum i32 {
    DSP_ITECHO_WETDRYMIX,
    DSP_ITECHO_FEEDBACK,
    DSP_ITECHO_LEFTDELAY,
    DSP_ITECHO_RIGHTDELAY,
    DSP_ITECHO_PANDELAY,
}

DSP_COMPRESSOR :: enum i32 {
    DSP_COMPRESSOR_THRESHOLD, 
    DSP_COMPRESSOR_RATIO, 
    DSP_COMPRESSOR_ATTACK,
    DSP_COMPRESSOR_RELEASE,
    DSP_COMPRESSOR_GAINMAKEUP,
    DSP_COMPRESSOR_USESIDECHAIN,
    DSP_COMPRESSOR_LINKED,
}

DSP_SFXREVERB :: enum i32 {
    DSP_SFXREVERB_DECAYTIME,
    DSP_SFXREVERB_EARLYDELAY,
    DSP_SFXREVERB_LATEDELAY,
    DSP_SFXREVERB_HFREFERENCE,
    DSP_SFXREVERB_HFDECAYRATIO,
    DSP_SFXREVERB_DIFFUSION,
    DSP_SFXREVERB_DENSITY,
    DSP_SFXREVERB_LOWSHELFFREQUENCY,
    DSP_SFXREVERB_LOWSHELFGAIN,
    DSP_SFXREVERB_HIGHCUT,
    DSP_SFXREVERB_EARLYLATEMIX,
    DSP_SFXREVERB_WETLEVEL,
    DSP_SFXREVERB_DRYLEVEL,
}

DSP_LOWPASS_SIMPLE :: enum i32 {
    DSP_LOWPASS_SIMPLE_CUTOFF,
}


DSP_DELAY :: enum i32 {
    DSP_DELAY_CH0,
    DSP_DELAY_CH1,
    DSP_DELAY_CH2,
    DSP_DELAY_CH3,
    DSP_DELAY_CH4,
    DSP_DELAY_CH5,
    DSP_DELAY_CH6,
    DSP_DELAY_CH7,
    DSP_DELAY_CH8,
    DSP_DELAY_CH9,
    DSP_DELAY_CH10,
    DSP_DELAY_CH11,
    DSP_DELAY_CH12,
    DSP_DELAY_CH13,
    DSP_DELAY_CH14,
    DSP_DELAY_CH15,
    DSP_DELAY_MAXDELAY,
}


DSP_TREMOLO :: enum i32 {
    DSP_TREMOLO_FREQUENCY,
    DSP_TREMOLO_DEPTH,
    DSP_TREMOLO_SHAPE,
    DSP_TREMOLO_SKEW,
    DSP_TREMOLO_DUTY,
    DSP_TREMOLO_SQUARE,
    DSP_TREMOLO_PHASE,
    DSP_TREMOLO_SPREAD,
}


DSP_SEND :: enum i32 {
    DSP_SEND_RETURNID,
    DSP_SEND_LEVEL,
}


DSP_RETURN :: enum i32 {
    DSP_RETURN_ID,
    DSP_RETURN_INPUT_SPEAKER_MODE,
}


DSP_HIGHPASS_SIMPLE :: enum i32 {
    DSP_HIGHPASS_SIMPLE_CUTOFF,
}


DSP_PAN_2D_STEREO_MODE_TYPE :: enum i32 {
    DSP_PAN_2D_STEREO_MODE_DISTRIBUTED,
    DSP_PAN_2D_STEREO_MODE_DISCRETE,
}


DSP_PAN_MODE_TYPE :: enum i32 {
    DSP_PAN_MODE_MONO,
    DSP_PAN_MODE_STEREO,
    DSP_PAN_MODE_SURROUND,
}


DSP_PAN_3D_ROLLOFF_TYPE :: enum i32 {
    DSP_PAN_3D_ROLLOFF_LINEARSQUARED,
    DSP_PAN_3D_ROLLOFF_LINEAR,
    DSP_PAN_3D_ROLLOFF_INVERSE,
    DSP_PAN_3D_ROLLOFF_INVERSETAPERED,
    DSP_PAN_3D_ROLLOFF_CUSTOM,
}


DSP_PAN_3D_EXTENT_MODE_TYPE :: enum i32 {
    DSP_PAN_3D_EXTENT_MODE_AUTO,
    DSP_PAN_3D_EXTENT_MODE_USER,
    DSP_PAN_3D_EXTENT_MODE_OFF,
}


DSP_PAN :: enum i32 {
    DSP_PAN_MODE,
    DSP_PAN_2D_STEREO_POSITION,
    DSP_PAN_2D_DIRECTION,
    DSP_PAN_2D_EXTENT,
    DSP_PAN_2D_ROTATION,
    DSP_PAN_2D_LFE_LEVEL,
    DSP_PAN_2D_STEREO_MODE,
    DSP_PAN_2D_STEREO_SEPARATION,
    DSP_PAN_2D_STEREO_AXIS,
    DSP_PAN_ENABLED_SPEAKERS,
    DSP_PAN_3D_POSITION,
    DSP_PAN_3D_ROLLOFF,
    DSP_PAN_3D_MIN_DISTANCE,
    DSP_PAN_3D_MAX_DISTANCE,
    DSP_PAN_3D_EXTENT_MODE,
    DSP_PAN_3D_SOUND_SIZE,
    DSP_PAN_3D_MIN_EXTENT,
    DSP_PAN_3D_PAN_BLEND,
    DSP_PAN_LFE_UPMIX_ENABLED,
    DSP_PAN_OVERALL_GAIN,
    DSP_PAN_SURROUND_SPEAKER_MODE,
    DSP_PAN_2D_HEIGHT_BLEND,
    DSP_PAN_ATTENUATION_RANGE,
    DSP_PAN_OVERRIDE_RANGE,
}


DSP_THREE_EQ_CROSSOVERSLOPE_TYPE :: enum i32 {
    DSP_THREE_EQ_CROSSOVERSLOPE_12DB,
    DSP_THREE_EQ_CROSSOVERSLOPE_24DB,
    DSP_THREE_EQ_CROSSOVERSLOPE_48DB,
}


DSP_THREE_EQ :: enum i32 {
    DSP_THREE_EQ_LOWGAIN,
    DSP_THREE_EQ_MIDGAIN,
    DSP_THREE_EQ_HIGHGAIN,
    DSP_THREE_EQ_LOWCROSSOVER,
    DSP_THREE_EQ_HIGHCROSSOVER,
    DSP_THREE_EQ_CROSSOVERSLOPE,
}


DSP_FFT_WINDOW :: enum i32 {
    DSP_FFT_WINDOW_RECT,
    DSP_FFT_WINDOW_TRIANGLE,
    DSP_FFT_WINDOW_HAMMING,
    DSP_FFT_WINDOW_HANNING,
    DSP_FFT_WINDOW_BLACKMAN,
    DSP_FFT_WINDOW_BLACKMANHARRIS,
}


DSP_FFT :: enum i32 {
    DSP_FFT_WINDOWSIZE,
    DSP_FFT_WINDOWTYPE,
    DSP_FFT_SPECTRUMDATA,
    DSP_FFT_DOMINANT_FREQ,
}

DSP_LOUDNESS_METER_HISTOGRAM_SAMPLES :: 66

DSP_LOUDNESS_METER :: enum i32 {
    DSP_LOUDNESS_METER_STATE,
    DSP_LOUDNESS_METER_WEIGHTING,
    DSP_LOUDNESS_METER_INFO,
}


DSP_LOUDNESS_METER_STATE_TYPE :: enum i32 {
    DSP_LOUDNESS_METER_STATE_RESET_INTEGRATED = -3,
    DSP_LOUDNESS_METER_STATE_RESET_MAXPEAK = -2,
    DSP_LOUDNESS_METER_STATE_RESET_ALL = -1,
    DSP_LOUDNESS_METER_STATE_PAUSED = 0,
    DSP_LOUDNESS_METER_STATE_ANALYZING = 1,
}

DSP_LOUDNESS_METER_INFO_TYPE :: struct {
    momentaryloudness: f32,
    shorttermloudness: f32,
    integratedloudness: f32,
    loudness10thpercentile: f32,
    loudness95thpercentile: f32,
    loudnesshistogram: [DSP_LOUDNESS_METER_HISTOGRAM_SAMPLES]f32,
    maxtruepeak: f32,
    maxmomentaryloudness: f32,
}

DSP_LOUDNESS_METER_WEIGHTING_TYPE :: struct {
    channelweight: [32]f32,
}


DSP_ENVELOPEFOLLOWER :: enum i32 {
    DSP_ENVELOPEFOLLOWER_ATTACK,
    DSP_ENVELOPEFOLLOWER_RELEASE,
    DSP_ENVELOPEFOLLOWER_ENVELOPE,
    DSP_ENVELOPEFOLLOWER_USESIDECHAIN
}

DSP_CONVOLUTION_REVERB :: enum i32 {
    DSP_CONVOLUTION_REVERB_PARAM_IR,
    DSP_CONVOLUTION_REVERB_PARAM_WET,
    DSP_CONVOLUTION_REVERB_PARAM_DRY,
    DSP_CONVOLUTION_REVERB_PARAM_LINKED
}

DSP_CHANNELMIX_OUTPUT :: enum i32 {
    DSP_CHANNELMIX_OUTPUT_DEFAULT,
    DSP_CHANNELMIX_OUTPUT_ALLMONO,
    DSP_CHANNELMIX_OUTPUT_ALLSTEREO,
    DSP_CHANNELMIX_OUTPUT_ALLQUAD,
    DSP_CHANNELMIX_OUTPUT_ALL5POINT1,
    DSP_CHANNELMIX_OUTPUT_ALL7POINT1,
    DSP_CHANNELMIX_OUTPUT_ALLLFE,
    DSP_CHANNELMIX_OUTPUT_ALL7POINT1POINT4
}

DSP_CHANNELMIX :: enum i32 {
    DSP_CHANNELMIX_OUTPUTGROUPING,
    DSP_CHANNELMIX_GAIN_CH0,
    DSP_CHANNELMIX_GAIN_CH1,
    DSP_CHANNELMIX_GAIN_CH2,
    DSP_CHANNELMIX_GAIN_CH3,
    DSP_CHANNELMIX_GAIN_CH4,
    DSP_CHANNELMIX_GAIN_CH5,
    DSP_CHANNELMIX_GAIN_CH6,
    DSP_CHANNELMIX_GAIN_CH7,
    DSP_CHANNELMIX_GAIN_CH8,
    DSP_CHANNELMIX_GAIN_CH9,
    DSP_CHANNELMIX_GAIN_CH10,
    DSP_CHANNELMIX_GAIN_CH11,
    DSP_CHANNELMIX_GAIN_CH12,
    DSP_CHANNELMIX_GAIN_CH13,
    DSP_CHANNELMIX_GAIN_CH14,
    DSP_CHANNELMIX_GAIN_CH15,
    DSP_CHANNELMIX_GAIN_CH16,
    DSP_CHANNELMIX_GAIN_CH17,
    DSP_CHANNELMIX_GAIN_CH18,
    DSP_CHANNELMIX_GAIN_CH19,
    DSP_CHANNELMIX_GAIN_CH20,
    DSP_CHANNELMIX_GAIN_CH21,
    DSP_CHANNELMIX_GAIN_CH22,
    DSP_CHANNELMIX_GAIN_CH23,
    DSP_CHANNELMIX_GAIN_CH24,
    DSP_CHANNELMIX_GAIN_CH25,
    DSP_CHANNELMIX_GAIN_CH26,
    DSP_CHANNELMIX_GAIN_CH27,
    DSP_CHANNELMIX_GAIN_CH28,
    DSP_CHANNELMIX_GAIN_CH29,
    DSP_CHANNELMIX_GAIN_CH30,
    DSP_CHANNELMIX_GAIN_CH31,
    DSP_CHANNELMIX_OUTPUT_CH0,
    DSP_CHANNELMIX_OUTPUT_CH1,
    DSP_CHANNELMIX_OUTPUT_CH2,
    DSP_CHANNELMIX_OUTPUT_CH3,
    DSP_CHANNELMIX_OUTPUT_CH4,
    DSP_CHANNELMIX_OUTPUT_CH5,
    DSP_CHANNELMIX_OUTPUT_CH6,
    DSP_CHANNELMIX_OUTPUT_CH7,
    DSP_CHANNELMIX_OUTPUT_CH8,
    DSP_CHANNELMIX_OUTPUT_CH9,
    DSP_CHANNELMIX_OUTPUT_CH10,
    DSP_CHANNELMIX_OUTPUT_CH11,
    DSP_CHANNELMIX_OUTPUT_CH12,
    DSP_CHANNELMIX_OUTPUT_CH13,
    DSP_CHANNELMIX_OUTPUT_CH14,
    DSP_CHANNELMIX_OUTPUT_CH15,
    DSP_CHANNELMIX_OUTPUT_CH16,
    DSP_CHANNELMIX_OUTPUT_CH17,
    DSP_CHANNELMIX_OUTPUT_CH18,
    DSP_CHANNELMIX_OUTPUT_CH19,
    DSP_CHANNELMIX_OUTPUT_CH20,
    DSP_CHANNELMIX_OUTPUT_CH21,
    DSP_CHANNELMIX_OUTPUT_CH22,
    DSP_CHANNELMIX_OUTPUT_CH23,
    DSP_CHANNELMIX_OUTPUT_CH24,
    DSP_CHANNELMIX_OUTPUT_CH25,
    DSP_CHANNELMIX_OUTPUT_CH26,
    DSP_CHANNELMIX_OUTPUT_CH27,
    DSP_CHANNELMIX_OUTPUT_CH28,
    DSP_CHANNELMIX_OUTPUT_CH29,
    DSP_CHANNELMIX_OUTPUT_CH30,
    DSP_CHANNELMIX_OUTPUT_CH31
}

DSP_TRANSCEIVER_SPEAKERMODE :: enum i32 {
    DSP_TRANSCEIVER_SPEAKERMODE_AUTO = -1,
    DSP_TRANSCEIVER_SPEAKERMODE_MONO = 0,
    DSP_TRANSCEIVER_SPEAKERMODE_STEREO,
    DSP_TRANSCEIVER_SPEAKERMODE_SURROUND,
}


DSP_TRANSCEIVER :: enum i32 {
    DSP_TRANSCEIVER_TRANSMIT,
    DSP_TRANSCEIVER_GAIN,
    DSP_TRANSCEIVER_CHANNEL,
    DSP_TRANSCEIVER_TRANSMITSPEAKERMODE
}


DSP_OBJECTPAN :: enum i32 {
    DSP_OBJECTPAN_3D_POSITION,
    DSP_OBJECTPAN_3D_ROLLOFF,
    DSP_OBJECTPAN_3D_MIN_DISTANCE,
    DSP_OBJECTPAN_3D_MAX_DISTANCE,
    DSP_OBJECTPAN_3D_EXTENT_MODE,
    DSP_OBJECTPAN_3D_SOUND_SIZE,
    DSP_OBJECTPAN_3D_MIN_EXTENT,
    DSP_OBJECTPAN_OVERALL_GAIN,
    DSP_OBJECTPAN_OUTPUTGAIN,
    DSP_OBJECTPAN_ATTENUATION_RANGE,
    DSP_OBJECTPAN_OVERRIDE_RANGE
}